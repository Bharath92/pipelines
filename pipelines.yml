resources:
  - name: git1
    type: GitRepo
    configuration:
      path: bharath92/sample-runSh
      gitProvider: bharath_github
      branches:
        include: master
  - name: git2
    type: GitRepo
    configuration:
      path: bharath92/sample-runSh
      gitProvider: bharath_github
      branches:
        include: master
      files:
        include: \btestdir\/file1\b
  - name: bb_git1
    type: GitRepo
    configuration:
      path: bharath92/sample-runSh
      gitProvider: bharath_bb
      branches:
        include: master
  - name: bb_git2
    type: GitRepo
    configuration:
      path: bharath92/sample-runSh
      gitProvider: bharath_bb
      branches:
        include: master
      files:
        include: \btestdir\/file1\b
  - name: bbs_git1
    type: GitRepo
    configuration:
      path: ~bharathu/sample-runSh
      gitProvider: bharath_bbs
      branches:
        include: master
  - name: bbs_git2
    type: GitRepo
    configuration:
      path: ~bharathu/sample-runSh
      gitProvider: bharath_bbs
      branches:
        include: master
      files:
        include: \btestdir\/file1\b
  - name: gl_git1
    type: GitRepo
    configuration:
      path: bharath92/sample-runSh
      gitProvider: bharath_gitlab
      branches:
        include: master
  - name: gl_git2
    type: GitRepo
    configuration:
      path: bharath92/sample-runSh
      gitProvider: bharath_gitlab
      branches:
        include: master
      files:
        include: \btestdir\/file1\b
  - name: git3
    type: GitRepo
    configuration:
      path: ~bharathu/poc
      gitProvider: bharath_bbs
      branches:
        include: master
  - name: git4
    type: GitRepo
    configuration:
      path: bharath92/multibranch-pipelines
      gitProvider: bharath_github
      branches:
        include: \b.+\b
  - name: git5
    type: GitRepo
    configuration:
      path: bharath92/pipelines
      gitProvider: bharath_github
      branches:
        include: basic2
  - name: git6
    type: GitRepo
    configuration:
      path: bharath92/pipelines
      gitProvider: bharath_github
      branches:
        include: master
      buildOn:
        commit: false
        pullRequestCreate: true
  - name: git7
    type: GitRepo
    configuration:
      path: ~bharathu/poc
      gitProvider: bharath_bbs
      branches:
        include: master
      buildOn:
        commit: false
        pullRequestCreate: false
pipelines:
  - name: check1
    steps:
      - name: basic
        type: Bash
        configuration:
          runtime:
            type: host
          inputResources:
            - name: git1
        execution:
          onExecute:
            - add_pipeline_variables "step=$step_id"
  - name: check2
    steps:
      - name: basic
        type: Bash
        configuration:
          runtime:
            type: host
          inputResources:
            - name: git2
        execution:
          onExecute:
            - echo hi
  - name: bb_check1
    steps:
      - name: basic
        type: Bash
        configuration:
          runtime:
            type: host
          inputResources:
            - name: bb_git1
        execution:
          onExecute:
            - add_pipeline_variables "step=$step_id"
  - name: bb_check2
    steps:
      - name: basic
        type: Bash
        configuration:
          runtime:
            type: host
          inputResources:
            - name: bb_git2
        execution:
          onExecute:
            - echo hi
  - name: bbs_check1
    steps:
      - name: basic
        type: Bash
        configuration:
          runtime:
            type: host
          inputResources:
            - name: bbs_git1
        execution:
          onExecute:
            - add_pipeline_variables "step=$step_id"
  - name: bbs_check2
    steps:
      - name: basic
        type: Bash
        configuration:
          runtime:
            type: host
          inputResources:
            - name: bbs_git2
        execution:
          onExecute:
            - echo hi
  - name: gl_check1
    steps:
      - name: basic
        type: Bash
        configuration:
          runtime:
            type: host
          inputResources:
            - name: gl_git1
        execution:
          onExecute:
            - add_pipeline_variables "step=$step_id"
  - name: gl_check2
    steps:
      - name: basic
        type: Bash
        configuration:
          runtime:
            type: host
          inputResources:
            - name: gl_git2
        execution:
          onExecute:
            - echo hi
  - name: check3
    steps:
      - name: basic
        type: Bash
        configuration:
          runtime:
            type: host
          inputResources:
            - name: git3
        execution:
          onExecute:
            - echo hi
  - name: check4
    steps:
      - name: basic
        type: Bash
        configuration:
          runtime:
            type: host
          inputResources:
            - name: git4
        execution:
          onExecute:
            - echo hi
  - name: check6
    steps:
      - name: basic
        type: Bash
        configuration:
          runtime:
            type: host
          inputResources:
            - name: git4
        execution:
          onExecute:
            - |
              update_commit_status_custom() {
                if [[ $# -le 0 ]]; then
                  echo "Usage: update_commit_status_custom RESOURCE [--status STATUS --message \"MESSAGE\" --context CONTEXT --url URL]" >&2
                  exit 99
                fi

                # parse and validate the resource details
                local resourceName="$1"
                shift

                local resource_id=$(find_resource_variable "$resourceName" resourceId)
                if [ -z "$resource_id" ]; then
                  echo "Error: resource not found for $resourceName" >&2
                  exit 99
                fi
                local integrationAlias=$(find_resource_variable "$resourceName" integrationAlias)
                local integration_name=$(eval echo "$"res_"$resourceName"_"$integrationAlias"_name)
                if [ -z "$integration_name" ]; then
                  echo "Error: integration data not found for $resourceName" >&2
                  exit 99
                fi

                local i_mastername=$(eval echo "$"res_"$resourceName"_"$integrationAlias"_masterName)

                # declare options and defaults, and parse arguments
                export opt_status=""
                export opt_message=""

                export opt_context=""
                if [ -z "$opt_context" ]; then
                  opt_context="${pipeline_name}_${step_name}"
                fi

                while [ $# -gt 0 ]; do
                  case $1 in
                    --status)
                      opt_status="$2"
                      shift
                      shift
                      ;;
                    --message)
                      opt_message="$2"
                      shift
                      shift
                      ;;
                    --context)
                      opt_context="$2"
                      shift
                      shift
                      ;;
                    --url)
                      opt_url="$2"
                      shift
                      shift
                      ;;
                    *)
                      echo "Warning: Unrecognized flag \"$1\""
                      shift
                      ;;
                  esac
                done

                if [ -z "$opt_status" ]; then
                  case "$current_script_section" in
                    onStart | onExecute )
                      opt_status="processing"
                      ;;
                    onSuccess )
                      opt_status="success"
                      ;;
                    onFailure )
                      opt_status="failure"
                      ;;
                    onComplete )
                      if [ "$is_success" == "true" ]; then
                        opt_status="success"
                      else
                        opt_status="failure"
                      fi
                      ;;
                    *)
                      echo "Error: unable to determine status in section $current_script_section" >&2
                      exit 99
                      ;;
                  esac
                fi

                if [ "$opt_status" != "processing" ] && [ "$opt_status" != "success" ] && [ "$opt_status" != "failure" ] ; then
                  echo "Error: --status may only be processing, success, or failure" >&2
                  exit 99
                fi

                if [ -z "$opt_message" ]; then
                  opt_message="Step $opt_status in pipeline $pipeline_name"
                fi

                local payload=""
                local endpoint=""
                local headers=""

                local commit=$(find_resource_variable "$resourceName" commitSha)
                local full_name=$(find_resource_variable "$resourceName" gitRepoFullName)
                local integration_url=$(eval echo "$"res_"$resourceName"_"$integrationAlias"_url)

                local token=$(eval echo "$"res_"$resourceName"_"$integrationAlias"_token)
                local state=""
                if [ "$opt_status" == "processing" ] ; then
                  state="pending"
                elif [ "$opt_status" == "success" ] ; then
                  state="success"
                elif [ "$opt_status" == "failure" ] ; then
                  state="failure"
                fi
                payload="{\"target_url\": \"\${opt_url}\",\"description\": \"\${opt_message}\", \"context\": \"\${opt_context}\", \"state\": \"$state\"}"
                endpoint="$integration_url/repos/$full_name/statuses/$commit"
                headers="-H Authorization:'token $token' -H Accept:'application/vnd.GithubProvider.v3'"

                local payload_file=/tmp/payload.json
                echo $payload > $payload_file

                replace_envs $payload_file

                local isValid=$(jq type $payload_file || true)
                if [ -z "$isValid" ]; then
                  echo "Error: payload is not valid JSON" >&2
                  exit 99
                fi

                echo "sending update"
                _post_curl "$payload_file" "$headers" "$endpoint"
              }

              update_commit_status_custom git4 --url "https://jfrog.com" --status "success"
            
          
  - name: check5
    steps:
      - name: basic
        type: Bash
        configuration:
          runtime:
            type: host
          inputResources:
            - name: git6
        execution:
          onExecute:
            - echo $res_git6_shaData
            - echo $res_git6_gitRepoFullName
            - export is_fork=true
            - |
              if $res_git6_isPullRequest; then
                head=$(echo "$res_git6_shaData" | jq -r .pullRequestRepoFullName)
                base="$res_git6_gitRepoFullName"
                if [ "$head" == "$base" ]; then
                  is_fork=false
                fi
              fi
            - echo $is_fork
            - export resourceName=git6
            - export isPrivateRepository=$(find_resource_variable "$resourceName" isPrivateRepository)
            - export pullRequestSourceUrl=$(find_resource_variable "$resourceName" pullRequestSourceUrl)
            - |
              if $isPrivateRepository; then
                export cloneUrl=$(find_resource_variable "$resourceName" gitRepoRepositorySshUrl)
              else
                export cloneUrl=$(find_resource_variable "$resourceName" gitRepoRepositoryHttpsUrl)
              fi
            - |
              if [ "$cloneUrl" != "$pullRequestSourceUrl" ]; then
                export isFork=true;
              else
                export isFork=false;
              fi
            - echo "$cloneUrl $pullRequestSourceUrl" 
            - echo $isFork
                      
